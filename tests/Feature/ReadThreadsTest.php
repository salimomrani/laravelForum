<?php

namespace Tests\Feature;

use App\Channel;
use App\Reply;
use App\Thread;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{

  use DatabaseMigrations;

  protected $thread;

  protected function setUp() {
	parent::setUp(); // TODO: Change the autogenerated stub

	$this->thread = create(Thread::class);
  }


  /**
     * A basic test example.
     * @test
     * @return void
     */
    public function a_user_can_view_all_threads()
    {

        $response = $this->get('/threads');

        $response->assertSee($this->thread->title);

    }

  /**
   * @test
   */
  function a_user_can_read_a_single_threads() {

	$response  = $this->get('/threads/channel/'.$this->thread->id);

	$response->assertSee($this->thread->title);

      }


  /**
   * @test
   */
  function a_user_can_read_replies_that_are_associated_with_a_thread() {
	$reply = create(Reply::class,['thread_id'=>$this->thread->id]);

	$response = $this->get('/threads/channel/'.$this->thread->id);
	$response->assertSee($reply->body);
  }

  /**
   * @test
   */
  function a_user_can_filter_threads_to_a_channel() {
    $channel = create(Channel::class);
    $threadInChannel = create(Thread::class,['channel_id'=>$channel->id]);
    $threadNotInChannel = create(Thread::class);

    $this->get('threads/'.$channel->slug)
	  ->assertSee($threadInChannel->title)
	  ->assertDontSee($threadNotInChannel->title);

    }


  /**
   * @test
   */
  function a_user_can_filter_threads_by_any_username() {
		$this->signIn(create(User::class,['name'=>'johnDoe']));

		$threadByJohn = create(Thread::class,['user_id'=>auth()->id()]);
		$threadNotByJohn = create(Thread::class);

		$this->get('threads?by=johnDoe')
		  ->assertSee($threadByJohn->title)
		  ->assertDontSee($threadNotByJohn->title);

      }


}
